"""Create an animation of the MHD flow fields.

The script reads CSV output files generated by ``main.cpp`` and
produces ``Result/flow_animation.mp4`` visualising the density,
pressure, velocity and magnetic fields over time.
"""

import glob
import re
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Discover available steps from density output files
rho_files = glob.glob("Result/out_rho_*.csv")
if not rho_files:
    raise SystemExit("No output files found in Result/")
steps = sorted(int(re.findall(r"_rho_(\d+).csv", f)[0]) for f in rho_files)

# Infer grid from first file
sample = pd.read_csv(rho_files[0], header=None)
xs = np.unique(sample[0])
ys = np.unique(sample[1])
NX, NY = len(xs), len(ys)
X, Y = np.meshgrid(xs, ys)


def load(step, prefix):
    df = pd.read_csv(f"Result/out_{prefix}_{step}.csv", header=None)
    return df[2].values.reshape(NX, NY).T

# Create figure with four subplots
fig, ((ax_rho, ax_p), (ax_vel, ax_B)) = plt.subplots(2, 2, figsize=(12, 10))


def update(step):
    rho = load(step, "rho")
    p = load(step, "p")
    u = load(step, "u")
    v = load(step, "v")
    bx = load(step, "bx")
    by = load(step, "by")

    for ax in (ax_rho, ax_p, ax_vel, ax_B):
        ax.clear()
        ax.set_aspect("equal")

    crho = ax_rho.contourf(X, Y, rho, levels=40, cmap="viridis")
    ax_rho.set_title(f"Density (step {step})")

    cp = ax_p.contourf(X, Y, p, levels=40, cmap="viridis")
    ax_p.set_title("Pressure")

    ax_vel.quiver(X[::2, ::2], Y[::2, ::2], u[::2, ::2], v[::2, ::2])
    ax_vel.set_title("Velocity")

    ax_B.quiver(X[::2, ::2], Y[::2, ::2], bx[::2, ::2], by[::2, ::2], color="tab:red")
    ax_B.set_title("Magnetic field")

    return crho.collections + cp.collections


ani = FuncAnimation(fig, update, frames=steps, blit=False)
fig.tight_layout()
ani.save("Result/flow_animation.mp4", writer="ffmpeg", fps=20)
print("Saved Result/flow_animation.mp4")

